- All the elements of a list must be of the same type unlike tuples
[] -- empty list
[3,9,6] :: Int
[1 .. 10] -- Same as [1,2,3,4,5,6,7,8,9,10]
[1, 3 .. 10] -- Same as [1,3,5,7,9]
in the previous example haskell takes the difference between the first two numbers (3 - 1) and keeps summing them until reaching the last number.

We can also have lists of tuples in haskell
* [(1, "One), (2, "Two")] -- [(Int, String)]

We can have a list of lists:
[[8], [3,4,5]] :: [[Int]]

List constructors:

Empty List:
[] :: [a]

Add Head:
(:) :: a -> [a] -> [a]

The notation:
[15, 12, 21]

is a shortcut for:
15 : 12 : 21 : []

which also means:
15 : (12 : (21 : []))

lists are linked lists in haskell

l1 = 3 : 2 : 1 : []
l2 = 4 : l1

nodes of the list are immutable

Lists and patters:
sum [] = 0
sum (x:xs) = x + sum xs -- list of elements removing  the first one (x is an element and xs is a list)

The type String is a list of Chars [Char]
name1 :: [Char]
name1 :: 'j' : 'i' : 'm' : []

name2 : String
name2 = "Nixential"
