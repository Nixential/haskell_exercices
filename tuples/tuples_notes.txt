- Tuples can hold mutiple types of data
example: (3, 'z', False) :: (Int, Char, Bool)

- Tuples can be nested
(True, (6 , 9)) :: (Bool, (Int, Int))

Use cases:

* Can be used if a function has to return more than one value
example: mostFrequentCharacter :: String -> (Char, Int)
	 mostFrequentCharacter "AVATAR" -> ('A', 3)

Decomposition of tuples into patterns:

ditance (x1, y1) (x2, y2) = sqrt ((x1 - x2)^2 + (y1 - y2)^2)

distance p1 p2 = sqrt (sqr dx + sqr dy)
	 where
	 (x1, y1) = p1
	 (x2, y2) = p2
	 dx = x1 - x2
	 dy = y1 - y2
	 sqr x = x * x
 
Empty tuple:
value of empty data: ()
